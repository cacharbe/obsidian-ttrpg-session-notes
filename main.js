/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CreateSessionPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// CreateSessionModal.ts
var import_obsidian = require("obsidian");
var CreateSessionModal = class extends import_obsidian.Modal {
  constructor(app2, plugin) {
    super(app2);
    this.plugin = plugin;
  }
  createInputDiv(form, labelText, inputType = "text") {
    const div = form.createEl("div");
    div.style.marginBottom = "10px";
    div.createEl("label", { text: labelText });
    const input = div.createEl("input");
    input.type = inputType;
    return input;
  }
  onOpen() {
    const { contentEl } = this;
    const form = contentEl.createEl("form");
    const campaignDiv = form.createEl("div");
    campaignDiv.style.marginBottom = "10px";
    campaignDiv.createEl("label", { text: "Campaign: " });
    const campaignSelect = campaignDiv.createEl("select");
    const selectCampaignOption = campaignSelect.createEl("option");
    selectCampaignOption.value = "";
    selectCampaignOption.text = "SELECT CAMPAIGN";
    selectCampaignOption.selected = true;
    selectCampaignOption.disabled = true;
    const sessionNumInput = this.createInputDiv(form, "Session Number: ");
    const sessionTitleInput = this.createInputDiv(form, "Session Title: ");
    const worldInput = this.createInputDiv(form, "World: ");
    const threadInput = this.createInputDiv(form, "Thread: ");
    const chapterInput = this.createInputDiv(form, "Chapter: ");
    const locationInput = this.createInputDiv(form, "Location: ");
    const fcDateInput = this.createInputDiv(form, "Fc-date: ");
    const fcCategoryInput = this.createInputDiv(form, "Fc-category: ");
    const ttrpgsFolder = this.app.vault.getAbstractFileByPath(this.plugin.settings.ttrpgsFolder);
    if (ttrpgsFolder instanceof import_obsidian.TFolder) {
      const campaigns = ttrpgsFolder.children.filter((file) => file instanceof import_obsidian.TFolder);
      campaigns.forEach((campaign) => {
        const option = campaignSelect.createEl("option");
        option.value = campaign.name;
        option.text = campaign.name;
      });
      campaignSelect.addEventListener("change", async () => {
        const selectedCampaign = campaignSelect.value;
        const campaignFolder = this.app.vault.getAbstractFileByPath(`ttrpgs/${selectedCampaign}`);
        if (campaignFolder instanceof import_obsidian.TFolder) {
          const sessionFiles = campaignFolder.children.filter((file) => file instanceof import_obsidian.TFile);
          const sessionNums = [];
          let mostRecentSessionFile;
          let maxSessionNum = 0;
          for (const file of sessionFiles) {
            const cache = this.app.metadataCache.getFileCache(file);
            if (cache && cache.frontmatter && cache.frontmatter.sessionNum) {
              const sessionNum = Number(cache.frontmatter.sessionNum);
              sessionNums.push(sessionNum);
              if (sessionNum > maxSessionNum) {
                maxSessionNum = sessionNum;
                mostRecentSessionFile = file;
              }
            }
          }
          const nextSessionNum = (maxSessionNum + 1).toString().padStart(2, "0");
          sessionNumInput.value = nextSessionNum;
          if (mostRecentSessionFile) {
            const cache = this.app.metadataCache.getFileCache(mostRecentSessionFile);
            const frontmatterKeys = ["world", "thread", "chapter", "location", "fc-date", "fc-category"];
            const inputFields = [worldInput, threadInput, chapterInput, locationInput, fcDateInput, fcCategoryInput];
            if (cache) {
              frontmatterKeys.forEach((key, index) => {
                if (cache.frontmatter) {
                  const value = key === "fc-date" && cache.frontmatter["fc-end"] ? cache.frontmatter["fc-end"] : cache.frontmatter[key];
                  inputFields[index].value = value || "";
                }
              });
            } else {
              console.error("Cache is undefined for the most recent session file.");
            }
          }
        }
      });
    }
    const dateDiv = form.createEl("div");
    dateDiv.style.marginBottom = "10px";
    dateDiv.createEl("label", { text: "Date: " });
    const dateInput = dateDiv.createEl("input");
    dateInput.type = "date";
    dateInput.valueAsDate = new Date();
    const submitButton = form.createEl("button");
    submitButton.type = "submit";
    submitButton.textContent = "Create Session";
    form.addEventListener("submit", async (event) => {
      event.preventDefault();
      const selectedCampaign = campaignSelect.value;
      const campaignFolder = this.app.vault.getAbstractFileByPath(`ttrpgs/${selectedCampaign}`);
      const nextSessionNum = sessionNumInput.value.toString().padStart(3, "0");
      const sessionTitle = sessionTitleInput.value;
      const date = new Date(dateInput.value);
      const selectedDate = dateInput.value;
      const year = date.getFullYear();
      const month = (date.getMonth() + 1).toString().padStart(2, "0");
      const day = date.getDate().toString().padStart(2, "0");
      const formattedDate = `${year}${month}${day}`;
      if (campaignFolder instanceof import_obsidian.TFolder) {
        const templateFile = this.app.vault.getAbstractFileByPath(this.plugin.settings.sessionTemplate);
        console.log("Template File: ", this.plugin.settings.sessionTemplate);
        if (templateFile instanceof import_obsidian.TFile) {
          let templateContent = await this.app.vault.read(templateFile);
          const templateVariables = {
            "{{campaign}}": selectedCampaign,
            "{{sessionNum}}": nextSessionNum,
            "{{date}}": selectedDate,
            "{{world}}": worldInput.value,
            "{{thread}}": threadInput.value,
            "{{chapter}}": chapterInput.value,
            "{{location}}": locationInput.value,
            "{{fc-date}}": fcDateInput.value,
            "{{fc-category}}": fcCategoryInput.value
          };
          for (const key in templateVariables) {
            templateContent = templateContent.replace(new RegExp(key, "g"), templateVariables[key]);
          }
          const newNotePath = `ttrpgs/${selectedCampaign}/${nextSessionNum}_${formattedDate} - ${sessionTitle}.md`;
          const newNoteFile = await this.app.vault.create(newNotePath, templateContent);
          const leaf = app.workspace.getLeaf(true);
          leaf.openFile(newNoteFile);
          this.close();
        }
      }
    });
  }
};

// CreateSessionSettings.ts
var import_obsidian2 = require("obsidian");
var CreateSessionSettingsTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("Session Template").setDesc("The note to use as a template for new sessions").addDropdown(async (dropdown) => {
      const templatesFolder = this.app.vault.getAbstractFileByPath("templates");
      if (templatesFolder instanceof import_obsidian2.TFolder) {
        const templates = templatesFolder.children.filter((file) => file instanceof import_obsidian2.TFile);
        templates.forEach((template) => {
          dropdown.addOption(template.path, template.name);
        });
        dropdown.setValue(this.plugin.settings.sessionTemplate);
        dropdown.onChange(async (value) => {
          console.log("Template selected:", value);
          this.plugin.settings.sessionTemplate = value;
          await this.plugin.saveSettings();
          console.log("Settings saved:", this.plugin.settings);
        });
      }
    });
    new import_obsidian2.Setting(containerEl).setName("Campaigns Folder").setDesc("The Folder Contianing the Campaign Folder(s) for Sessions").addDropdown(async (dropdown) => {
      const ttrpgsFolder = this.app.vault.getFolderByPath("ttrpgs");
      const rootFolder = this.app.vault.getFolderByPath("/");
      console.log("TTRPGS selected:", ttrpgsFolder);
      console.log("Folder selected:", rootFolder);
      if (ttrpgsFolder !== null) {
      } else {
      }
      if (rootFolder instanceof import_obsidian2.TFolder) {
        const folders = rootFolder.children.filter((folder) => folder instanceof import_obsidian2.TFolder);
        folders.forEach((folder) => {
          dropdown.addOption(folder.path, folder.name);
        });
        dropdown.setValue(this.plugin.settings.ttrpgsFolder);
        dropdown.onChange(async (value) => {
          console.log("Folder selected:", value);
          this.plugin.settings.ttrpgsFolder = value;
          await this.plugin.saveSettings();
          console.log("Settings saved:", this.plugin.settings);
          console.log("Settings saved:", this.plugin.settings);
        });
      }
    });
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  sessionTemplate: "",
  ttrpgsFolder: ""
};
var CreateSessionPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("dice", "Create Session", (evt) => {
      new CreateSessionModal(this.app, this).open();
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    this.addSettingTab(new CreateSessionSettingsTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
